#######################################################################################################################
frmIndex - frmMain - frmRecord
                   - frmUser
                   - frmSetProcessTimer
                   - frmSetServer
                   - frmProgramOption
                   - frmSCProtocol
                   - frmProgramInfo
Module - MainProgram
       - ConnectDatabase
       - ProcessRequest
       - RequestModule
#######################################################################################################################

#frmIndex : 프로그램 옵션로드 및 프로그램 정보 표시

 frmIndex폼이 로드되면 즉시 옵션파일을 찾는다. 옵션파일에는 포트번호 및 로그파일의 경로가 저장되며
 아래와 같은 형식을 가지고 있다. portnumber는 포트번호, logfilepath은 로그파일의 경로이다.
 ----------------------------------------------------------------------------------------------------------------------
 portnumber=20001
 logfilepath=c:\program\log\log.txt
 ----------------------------------------------------------------------------------------------------------------------
 옵션파일이 존재하지 않을 경우 포트번호는 20001로, 로그파일의 경로를 "./log.txt"로 적용시키지만,
 옵션파일이 존재시 저장되어 있는 값대로 포트번호와 로그파일의 경로를 프로그램에 적용시키게 된다.
 옵션파일을 라인단위로 읽으면서, 그 라인 내 '=' 좌측에 portnumber나 logfilepath과 같은 이름이 있는지
 찾는다. '='의 좌측에 portnumber가 있으면 우측에는 포트번호가 저장되있는 뜻이므로 '='의 우측에 있는 값을
 읽어 정수형으로 값을 변환 후 적용한다. 그리고 '='의 좌측에 logfilepath가 있으면 우측에는 로그파일의 경로가
 저장되있는 뜻이므로 '='의 우측에 있는 값을 로그파일의 경로로 적용한다.
 옵션적용이 끝나면 MDI Parent Form인 frmMain을 로드하며 frmIndex는 언로드한다.


#frmMain : 서버소켓처리 및 클라이언트와 통신, 부수적인 작업을 위한 메인윈도우

 frmMain폼이 로드되면 요청메시지가 저장될 배열을 초기화 시키고,
 MDI Child Form인 frmRecord와 frmUser를 로드한다.
 frmMain폼이 언로드되면 기록되어 있는 로그를 저장하고 현재 열려있는 하위폼 모두 언로드하여 프로그램을 종료한다.

 frmMain에는 메뉴, 타이머, 윈소켓의 오브젝트가 포함된다.
 메뉴는 서버, 데이터베이스, 상태, 옵션, 도움말로 크게 5개로 나누어져 있다.
 서버 메뉴의 하위메뉴 중,
 서버 열기를 선택하면, 클라이언트가 현재 서버로 접속이 가능하도록 윈소켓 오브젝트를 활성화시키고,
 서버를 개방했음을 로그로 남긴다. 만약 설정한 포트가 다른 프로그램에서 이미 사용중인 포트인 경우 오류메시지를
 표시하여 포트번호를 변경할 수 있도록 frmSetServer를 로드한다. 
 서버 닫기를 선택하면, 클라이언트가 더 이상 현재 서버로 접속이 불가능하도록 윈소켓 오브젝트를 비활성화시키고,
 서버를 닫았음을 로그로 남긴다.
 포트 설정을 선택하면, 현재 서버에서 사용할 포트를 변경할 수 있도록 frmSetServer폼을 로드한다.
 프로그램 종료를 선택하면, 윈소켓을 비활성화시키고 열려있는 데이터베이스를 모두 닫고 frmMain폼을 언로드한다.
 데이터베이스 메뉴의 하위메뉴 중,
 접속자 현황 보기를 선택하면, MDI Child Form인 frmUser를 로드한다. 만약 로드되어 있는 상태라면 무시한다.
 점수 기록 보기를 선택하면, MDI Child Form인 frmRecord를 로드한다. 만약 로드되어 있는 상태라면 무시한다.
 상태 메뉴의 하위메뉴 중,
 사용자 현황 보기를 선택하면, frmMain폼의 좌측에 접속한 사용자 리스트와 이 리스트를 제어하는 툴바의 Visible값을
 변경하여 Visible값이 True인 경우 False로 변경하여 폼 내에 표시되지 않도록 하고, Visible값이 False인 경우
 True로 변경하려 폼 내에 표시되도록 한다. 사용자 리스트는 소켓번호와 ID혹은 "Anonymous"와 소켓 Request번호로 구성된다.
 접속자 현황 갱신을 선택하면, 현재 열려 있는 각각의 윈소켓을 검사하여 상태가 Connected인 사용자만 표시하도록
 폼 좌측의 사용자 리스트를 갱신하고, 현재 상태가 Connected인 사용자의 수를 세어 접속 중인 사용자 수를 라벨에 표시한다.
 접속자 정보 보기를 선택하면, 폼 좌측의 사용자 리스트에서 선택한 소켓번호를 추출하여 해당 사용자의 ID를 추출한다.
 만약 추출한 ID가 "Anonymous"라면 프로시저 루틴을 종료한다. 추출한 ID가 "Anonymous"가 아니라면
 소켓의 Request번호를 추출하고 사용자에 대한 데이터베이스 "사용자목록"테이블에서 동일한 ID를 검색하고, 해당 ID에 대해
 "사용자목록"테이블에서 이름, 생년, 메일주소, 계산나이, 공간나이, 암기나이를 읽어 각 라벨에 표시하고, 해당 ID에 대해
 "계산점수목록", "공간점수목록", "암기점수목록"테이블에서 날짜, 시간, 점수를 전부 읽어 게임 기록에 대한 리스트에
 모두 표시한다.
 접속자 강제 종료를 선택하면, 폼 좌측의 사용자 리스트에서 선택한 사용자의 소켓번호를 추출하여 해당 윈소켓 오브젝트를
 비활성화 시키고, 사용자를 강제 종료시켰음을 로그로 남긴다.
 처리 대기중인 요청메시지 보기를 선택하면, 폼 좌측 사용자 리스트 하단에 요청메시지에 대한 리스트와 이 리스트를
 제어하는 툴바의 Visible값을 Not()을 수행하여 True일때 표시하도록 한다.
 요청메시지 목록 갱신을 선택하면, 현재 요청메시지가 저장되어 있는 배열을 요청메시지 리스트를 통해 출력하고
 현재 처리중인 메시지의 위치를 라벨에 표시한다.
 요청메시지 처리 시간간격 설정을 선택하면, 요청메시지를 처리하는 속도를 조절하기위해 frmSetProcessTimer을 로드하여
 타이머값을 변경할 수 있도록 한다.
 요청메시지 목록 리셋을 선택하면, 현재 요청메시지가 저장되어 있는 배열과 메시지 처리 위치를 초기화하고,
 메시지 목록을 리셋했음을 로그로 남긴다.
 요청메시지 처리 시작을 선택하면, 타이머를 활성화하고 요청메시지 처리가 시작되었음을 로그로 남긴다.
 만약 Interval값이 0이라면 1000으로 설정한다.
 요청메시지 처리 중지를 선택하면, 타이머를 비활성화시키고 요청메시지 처리가 중지되었음을 로그로 남긴다.
 옵션 메뉴의 하위메뉴 중,
 로그 보기를 선택하면, 현재 폼의 하단에 남겨진 로그들을 볼 수 있도록 리스트와 이 리스트를 제어하는 툴바의
 Visible값을 Not()을 수행하여 True일때 표시하도록 한다.
 로그 저장을 선택하면, 폼의 하단 로그에 대한 리스트의 목록들을 연결하여, 지정된 로그파일의 경로에 텍스트 형식으로
 파일을 저장한다. 만약 로그파일의 경로가 잘못되었거나 찾을 수 없는 위치라면 오류 메시지를 표시한다.
 오류메시지가 표시가 되어도 프로그램은 정상적으로 동작한다.
 로그 옵션을 선택하면, 로그파일을 저장할 경로를 변경할 수 있도록 frmProgramOption을 로드한다.
 메시지 입력을 선택하면, 로그리스트 밑에 서버가 클라이언트로 메시지를 직접 보낼 수 있는 입력텍스트 필드와
 전송버튼의 Visible값을 Not()을 수행하여 True일때 표시하도록 한다.

 전송버튼을 클릭시, 입력텍스트필드의 내용이 비어있지 않으면 좌측 사용자 목록에서 선택한 사용자에 대한 소켓번호를
 추출하여 해당 소켓으로 입력텍스트필드의 내용을 전송하고, 입력텍스트필드의 내용을 지운다. 만약 선택한 사용자가
 비정상적으로 연결을 끊어서 오류가 발생한 경우 메시지 전송실패 혹은 현재 접속자가 아님을 라벨에 표시한다.
 메시지를 전송하거나 실패하게 되면 각각 로그를 남긴다.

 윈소켓은 클라이언트가 접속을 요청하거나 접속을 해제한 경우, 클라이언트로부터 메시지가 도착했을 경우에 따라
 각각의 프로시져를 수행한다.
 클라이언트가 접속을 요청한 경우, 현재 상태가 Disconnected인 소켓이 있는지 찾고, 만약 Disconnected상태인 소켓이 없으면
 현재 소켓과 같은 소켓을 한개 더 생성하여 그 소켓의 상태를 Connected상태로 변경하고 Reauest번호는 소켓번호와
 매개변수로 받은 클라이언트 접속시도시 사용한 RequestID와 사용자가 접속할 때마다 1씩 증가하는 카운터번호를
 조합하고 해당 소켓의 사용자 ID를 기본값인 "Anonymous"로 설정하여 폼 좌측의 접속중인 사용자 목록을 갱신하고
 사용자가 접속했음을 로그로 남긴다.
 클라이언트로부터 메시지가 도착한 경우, 도착한 소켓의 메시지를 임시변수에 저장한다. 임시변수에 저장된 메시지의
 좌측 1번째 문자가 '#'라면 요청메시지의 배열에 저장하고 요청메시지가 왔음을 로그로 남긴다. 좌측 1번째 문자가
 '#'이 아닌 메시지인 경우 설계한 메시지형식과 다른 것으로 간주하고 메시지를 무시한다.
 요청메시지를 배열에 저장시 요청메시지 앞에 해당 클라이언트의 소켓번호와 Request번호를 덧붙여 저장하는데,
 그 이유는 해당 클라이언트가 접속을 끊고 같은 소켓으로 다른 클라이언트가 접속하여 응답메시지가 다른 사람에게
 전송될수 있기때문에 이를 방지하기위해 수신자를 확실히 확인하기위해 클라이언트의 소켓번호와 Request번호를 덧붙였다.
 클라이언트가 접속을 해제한 경우, 사용한 소켓은 비활성시키고 상태를 Disconnected로 변경하고 Reauest번호는 0으로
 초기화 시킨 후 좌측 접속중 사용자 목록을 갱신하고 사용자가 접속을 종료했음을 로그로 남긴다.

 타이머는 활성화되어 Interval값만큼 시간이 지났을 때 해당 프로시져가 수행된다.
 메시지 처리에 대한 타이머가 타이머 시간이 지났을 때, ProcessRequest의 요청메시지 처리함수를 호출한다.
 로그 자동 저장에 대한 타이머가 타이머 시간이 지났을 때, 옵션 메뉴의 로그 저장을 선택했을 때
 수행하는 프로시져를 수행한다.

#frmRecord

 frmRecord폼에는 데이터그리드와 툴바, 정렬방향에 대한 체크박스, 정렬기준과 조건과 연산자에 대한 콤보리스트,
 데이터입력텍스트필드가 있다.

 frmRecord폼이 로드되면 정렬기준, 조건, 연산자에 대한 콤보리스트의 Index값을 0으로 초기화시킨다.
 그리고 데이터베이스의 "계산점수목록"과 "공간점수목록", "암기점수목록"테이블에 연결하기위해 ConnectDatabase모듈의
 SetRecordConnection함수를 호출한다. 그리고 "select"에 대한 SQL문을 매개변수로 ConnectDatabase모듈의
 ConnectRecordTable함수를 호출하여 데이터그리드에 각 점수목록에 대한 값들을 적용시킨다.
 frmRecord폼이 언로드되면 ConnectDatabase모듈의 CloseRecordConnection함수를 호출하여 각 테이블과 데이터그리드
 사이의 연결을 해제한다.

 frmRecord폼의 툴바는 새로고침과 데이터검색에 대한 버튼이 있다.
 새로고침에 대한 버튼을 클릭하는 경우, 데이터베이스와 선택된 데이터그리드 사이를 재연결한다. 그리고
 정렬기준에 대한 콤보리스트 값과 정렬방향에 대한 체크박스의 값에 따라 "select"와 "Order by", "ASC"/"DESC"을
 이용하여 SQL문을 생성하여 ConnectDatabase모듈의 ConnectRecordTable함수를 호출하여 데이터그리드에 값을 적용시킨다.
 데이터검색에 대한 버튼을 클릭하는 경우, 새로고침과 마찬가지로 데이터베이스와 선택된 데이터그리드 사이를
 재연결한 후, 정렬기준에 대한 콤보리스트 값과 정렬방향에 대한 체크박스의 값에 따라 "Order by", ASC"/"DESC"를
 지정하고, 조건과 연산자에 대한 콤보리스트의 값과 입력텍스트필드의 값을 이용하여 "Where"문의 조건식을 만들고
 SQL문을 생성하여 ConnectDatabase모듈의 ConnectRecordTable함수를 호출하여 데이터그리드에 값을 적용시킨다.

 데이터그리드의 인스턴스인 AllowUpdate와 AllowDelete값을 False로 설정하여 데이터그리드를 통한 데이터의
 수정과 삭제는 할 수 없도록 하였다.

#frmUser

 frmUser폼은 frmRecord폼과 유사하다.
 frmUser폼에는 데이터그리드와 툴바, 정렬방향에 대한 체크박스, 정렬기준과 조건과 연산자에 대한 콤보리스트,
 데이터입력텍스트필드가 있다.

 frmUser폼이 로드되면 정렬기준, 조건, 연산자에 대한 콤보리스트의 Index값을 0으로 초기화시킨다.
 그리고 데이터베이스의 "사용자목록"테이블에 연결하기위해 ConnectDatabase모듈의 SetUserConnection함수를 호출한다.
 그리고 "select"에 대한 SQL문을 매개변수로 ConnectDatabase모듈의 ConnectUserTable함수를 호출하여 데이터그리드에
 "사용자목록"대한 값들을 적용시킨다.
 frmUser폼이 언로드되면 ConnectDatabase모듈의 CloseUserConnection함수를 호출하여 "사용자목록"테이블과
 데이터그리드 사이의 연결을 해제한다.

 frmUser폼의 툴바는 새로고침과 데이터검색에 대한 버튼이 있다.
 새로고침에 대한 버튼을 클릭하는 경우, 데이터베이스와 "사용자목록"에 대한 데이터그리드 사이를 재연결한다.
 그리고 정렬기준에 대한 콤보리스트 값과 정렬방향에 대한 체크박스의 값에 따라 "select"와 "Order by",
 "ASC"/"DESC"을 이용하여 SQL문을 생성하여 ConnectDatabase모듈의 ConnectUserTable함수를 호출하여
 데이터그리드에 값을 적용시킨다.
 데이터검색에 대한 버튼을 클릭하는 경우, 새로고침과 마찬가지로 데이터베이스와 선택된 데이터그리드 사이를
 재연결한 후, 정렬기준에 대한 콤보리스트 값과 정렬방향에 대한 체크박스의 값에 따라 "Order by", ASC"/"DESC"를
 지정하고, 조건과 연산자에 대한 콤보리스트의 값과 입력텍스트필드의 값을 이용하여 "Where"문의 조건식을 만들고
 SQL문을 생성하여 ConnectDatabase모듈의 ConnectUserTable함수를 호출하여 데이터그리드에 값을 적용시킨다.

 데이터그리드의 인스턴스인 AllowUpdate와 AllowDelete값을 False로 설정하여 데이터그리드를 통한 데이터의
 수정과 삭제는 할 수 없도록 하였다.

#frmSetProcessTimer

 frmSetProcessTimer폼의 콤보리스트에는 100부터 5000까지 50,100,500의 간격으로 수치가 저장되어 있으며
 임의의 입력은 불가능하며 선택만 가능하다.
 콤보리스트의 값을 선택하고나서 frmSetProcessTimer폼의 확인버튼을 선택하면 메시지처리에 대한 타이머에
 콤보리스트에서 선택한 Interval값을 적용하고 요청메시지 처리시간간격이 변경되었음을 로고로 남긴다.
 frmSetProcessTimer폼을 언로드한다.

#frmSetServer

 frmSetServer폼이 로드되면 포트번호를 입력할 수 있는 입력 텍스트필드에 현재 설정되어 있는 포트번호로
 초기화된다. 입력 텍스트필드에 문자를 입력하였을 때마다 입력 텍스트필드의 값은 Val()을 이용하여 수치로
 변경하고 수치가 32767이 넘어 갈 경우 최대치 32767로 설정하도록 하였다.
 입력 텍스트필드에 포트번호를 입력한 후 확인버튼을 선택하면, 현재 서버가 개방 상태일 경우 서버를 닫았다가
 포트번호를 변경 후 서버를 다시 개방하도록 하고, 개방 상태가 아닌 경우 포트번호만 변경하고
 frmSetServer폼을 언로드한다.

#frmProgramOption

 frmProgramOption폼이 로드되면, 로그파일경로와 자동 저장 주기를 입력할 수 있는 입력 텍스트 필드 및 자동저장
 여부를 설정하는 체크 박스에 현재 적용 되어 있는 값을 적용한다. 로그파일 경로는 frmIndex나 현재 폼에서
 설정된 값이고, 자동 저장 주기는 frmMain폼의 로그파일 자동 저장에 대한 타이머의 Interval값이고 체크박스는
 이 타이머의 활성화여부이다.
 확인버튼을 선택하면, 입력한 파일 경로가 올바른 경로인지 확인하기 위해 해당 경로로 파일열기를 수행하고
 오류가 발생하는 경우 잘못된 경로임을 메시지창으로 알려주고, 오류가 발생하지 않는 경우 frmMain의
 로그파일 자동저장에 대한 타이머의 Interval값과 Enable값, 로그파일 경로를 적용한다.
 
#frmSCProtocol

 frmSCProtocol은 서버-클라이언트간 메시지 형식을 보여주기위해 만들었다.
 frmSCProtocol폼이 로드되면 "./clienttoserver.txt"과 "./servertoclient.txt"파일을 읽어 텍스트 필드에 출력한다.

#frmProgramInfo

 frmProgramInfo폼은 프로그램 정보를 보여주기위해 만들었다.

#MainProgram

 MainProgram모듈에는 AddLog(String),SetNotice(String)함수가 있다.
 AddLog(String)함수는 frmMain폼의 하단 로그리스트에 현재 시간과 매개변수로 받은 String을 조합하여 삽입한다.
 로그를 삽입한 후 로그리스트의 표시위치는 현재 로그리스트의 카운트값 - 1로 설정하여 최근 로그가 보이도록 한다.

 SetNotice(String)함수는 frmMain폼의 로그리스트 밑에 위치한 라벨에 알림을 표시하는 함수로
 매개변수로 받은 String을 해당 라벨의 캡션에 적용한다.

#ConnectDatabase

 ConnectDatabase모듈에는 SetUserConnection(), CloseUserConnection(),ConnectUserTable(Query),
 SetRecordConnection(), CloseRecordConnection(), ConnectRecordTable(Query)함수로
 데이터베이스에 접근하거나 레코드편집의 기능을 수행한다.

 SetUserConnection()과 SetRecordConnection()은 아래와 같은 형식의 구문을 이용하여 데이터베이스에 연결한다.
 (App.Path : 현재 프로그램 경로, DataBasePassWord : 데이터베이스에 설정한 암호)
 ----------------------------------------------------------------------------------------------------------------------
 Set UserConnection = New ADODB.Connection
 UserConnection.CursorLocation = adUseClient
 UserConnection.Open _
     "PROVIDER=Microsoft.Jet.OLEDB.4.0;" & "Data Source=" & App.Path & _
     "\Database\Library.mdb;Jet OLEDB:Database Password=" & DataBasePassWord & ";"
 ----------------------------------------------------------------------------------------------------------------------

 CloseUserConnection()과 CloseRecordConnection()은 데이터베이스와 연결을 끊는 함수로,
 현재 데이터베이스와 연결이 되어있는 경우에 데이터베이스를 Close한다.

 ConnectUserTable(Query)과 ConnectRecordTable(Query)는 생성한 쿼리를 실행시키는 함수로,
 아래와 같은 형식의 구문을 이용하였다.
 (frmUser.UserList.ReBind : 데이터그리드에 적용)
 ----------------------------------------------------------------------------------------------------------------------
 Set UserRecord = New ADODB.Recordset
 UserRecord.Open Query, UserConnection, adOpenStatic, adLockOptimistic
 Set frmUser.UserList.DataSource = UserRecord
 frmUser.UserList.ReBind
 ----------------------------------------------------------------------------------------------------------------------

#ProcessRequest

 ProcessRequest모듈은 요청메시지를 처리하는 Answer()함수와 요청메시지에 따라 수행할 함수로 구성되어있다.

 Answer()함수는 실제 요청메시지를 처리지 않고 요청메시지에 맞는 함수를 수행하도록 분류한 후 반환받은 응답을
 클라이언트에게 전송하도록 하였다.
 Answer()함수는 우선 RequestModule모듈의 GetRequest()함수를 이용하여 현재 처리중 메시지를 갱신하고
 GetCurrentRequest()함수를 이용하여 처리할 요청메시지를 가져오고 요청메시지를 제대로 가져왔는지 확인한다.
 이 요청메시지에는 송신 클라이언트의 소켓번호와 Request번호가 붙여져 있는데 이를 추출하여
 소켓상태가 Connected로 현재 접속중인 유저인지, 현재 소켓의 소켓번호와 Request번호가 일치하는지 확인한다.
 위 조건중 하나도 만족하지 못하면 응답받을 클라이언트가 접속을 종료했음을 로그로 남기고 루틴을 종료한다.
 위 조건이 모두 만족하게 되면 요청메시지의 앞부분 소켓번호와 Request를 떼어버리고 어떤 요청메시지인지
 '#'과 ' '(공백) 사이의 단어를 추출한다. (예: #login ahyane,alpha -> login 추출)
 추출된 단어에 따라 각각 다른 함수를 호출한다. 호출시 소켓번호와 요청메시지를 매개변수로 가진다.
 추출된 단어가
 login인 경우, A_Login()
 logout인 경우, A_Logout()
 findid인 경우, A_FindID()
 findpass인 경우, A_FindPass()
 join인 경우, A_Join()
 dupid인 경우, A_DupID()
 record인 경우, A_Record()
 today인 경우, A_Today()
 save인 경우, A_Save()
 average인 경우, A_Average()
 getinfo인 경우, A_GetInfo()
 setinfo인 경우, A_SetInfo()
 leave인 경우, A_Leave()함수를 호출한 후, 응답메시지를 반환받는다.
 반환받은 응답메시지가 공백인지 확인한 후 공백이 아니면 클라이언트로 응답메시지를 전송하고
 클라이언트에게 응답메시지를 송신했음을 로그로 남긴다.

 A_Login()함수는 로그인 처리를 하는 함수이다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"인지 확인한다. "Anonymous"인 클라이언트만
 로그인을 할 수 있기때문에 "Anonymous"가 아닌 클라이언트는 이미 로그인했음을 알리는 응답메시지를 만들어 반환한다.
 매개변수로 받은 요청메시지에는 로그인을 수행하기위해 필요한 ID와 비밀번호가 포함되어 있는데
 이를 추출한다. 다른 소켓에 같은 ID의 사용자가 있는지 검색한다. 만약 같은 ID의 사용자가 존재하면
 중복 로그인임을 알리는 응답메시지를 만들어 반환한다. 그다음 데이터베이스의 '사용자목록'테이블에
 해당 ID와 비밀번호가 일치하는 사용자가 있는지 검색한다. 존재하지 않는다면 ID혹은 비밀번호가 틀렸음을
 알리는 응답메시지를 만들어 반환한다. 로그인 하기위한 조건이 모두 만족하면 해당 소켓의 사용자 ID를 변경하고
 frmMain폼의 좌측 접속자 목록을 갱신하고, 로그인이 성공했음을 알리는 응답메시지를 만들어 반환한다.
 
 A_Logout()함수는 로그아웃시켜주는 함수이다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"가 아닌지 확인한다. "Anonymous"인 클라이언트는
 로그인을 한 상태가 아니므로 로그아웃을 할 수 없으므로 이미 로그아웃임을 알리는 응답메시지를 만들어
 반환한다. "Anonymous"가 아닌 경우, 해당 소켓의 사용자 ID를 "Anonymous"로 변경하고
 frmMain폼의 좌측 접속자 목록을 갱신하고, 로그아웃이 성공했음을 알리는 응답메시지를 만들어 반환한다.

 A_FindID()함수는 사용자가 ID를 잊어버렸을때 찾아주는 함수이다.
 매개변수로 받은 요청메시지에는 ID를 찾기위해 필요한 이름과 메일주소가 포함되어 있는데 이를 추출하여
 데이터베이스 "사용자목록"테이블에 해당 이름과 메일주소가 일치되는 사용자가 있는지 검색한다.
 만약 존재하지 않는다면 검색이 실패했음을 알리는 응답메시지를 만들어 반환하고, 존재하는 경우 해당 ID를 포함한
 응답메시지를 만들어 반환한다.

 A_FindPass()함수는 사용자가 비밀번호를 잊어버렸을때 찾아주는 함수이다.
 매개변수로 받은 요청메시지에는 비밀번호를 찾기위해 필요한 ID와 메일주소가 포함되어 있는데 이를
 추출하여 데이터베이스 "사용자목록"테이블에 해당 ID와 메일주소가 일치되는 사요아가 있는지 검색한다.
 만약 존재하지 않는다면 검색이 실패했음을 알리는 응답메시지를 만들어 반환하고,
 존재하는 경우, 해당 비밀번호와 이름, 아이디, 메일주소를 매개변수로 PHP웹서버의 메일전송함수에
 아래와 같이 URL을 조합하여 접속한다.
 ----------------------------------------------------------------------------------------------------------------------
 "http://www.ahyane.net/@mail/mailpass.php?rc=" & RECEIVER & "&nm=" & NAME & "&id=" & ID & "&pw=" & PW
 ----------------------------------------------------------------------------------------------------------------------
 그리고 비밀번호를 메일로 발송해음을 응답메시지로 만들어 반환한다.

 A_Join()함수는 새 사용자를 등록시키기위한 함수이다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"인지 확인한다. "Anonymous"가 아닌 클라이언트는
 사용자등록을 할 수 없도록 하였기 때문에 로그인중임을 응답메시지로 만들어 반환한다.
 매개변수로 받은 요청메시지에는 사용자등록을 하기위해 필요한 ID, 이름, 비밀번호, 메일주소, 나이가
 포함되어있다. 이 값들중 나이는 매년 변하는 값이므로 현재년도 - 나이 + 1하여 태어난 년도로 저장한다.
 데이터베이스 "사용자목록"테이블에 "INSERT INTO"문과 추출한 값들을 SQL문으로 조합하여 데이터베이스에 적용한다.
 데이터베이스 "사용자목록"테이블의 "ID"필드는 Primary Key로 설정되어있기때문에 같은 ID가 존재하는 경우
 OverLap의 오류가 발생하게 되는데 이 경우에는 같은 ID가 이미 존재함을 응답메시지로 만들어 반환한다.
 정상적으로 "사용자목록"테이블에 삽입이 완료된 경우 현재 소켓의 사용자 ID를 "Anonymous"에서 요청받은 ID로
 바꾸고 frmMain폼의 좌측 접속자 목록을 갱신하고,
 해당 사용자의 이름과 아이디, 메일주소를 매개변수로 PHP웹서버의 메일전송함수에
 아래와 같이 URL을 조합하여 접속한다.
 ----------------------------------------------------------------------------------------------------------------------
 "http://www.ahyane.net/@mail/mailwelcome.php?rc=" & RECEIVER & "&nm=" & NAME & "&id=" & ID
 ----------------------------------------------------------------------------------------------------------------------
 그리고 사용자등록이 성공했음을 응답메시지로 만들어 반환한다.

 A_DupID()함수는 새로 등록이 가능한 ID인지 알기 위한 함수이다.
 매개변수로 받은 요청메시지에는 등록가능한지 확인 할 ID가 포함되어 있는데 이를 추출한다.
 데이터베이스 "사용자목록"테이블에 동일한 ID가 존재하는지 검색한다.
 만약 동일한 ID가 존재하는 경우, 새로 등록할 수 없는 ID임을 응답메시지로 만들어 반환하고
 존재하지 않는 경우, 새로 등록이 가능한 ID임을 응답메시지로 만들어 반환한다.

 A_Record()함수는 저장한 점수를 확인할 수 있도록하는 함수이다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"가 아닌지 확인한다. "Anonymous"인 클라이언트는
 로그인을 하지 않은 상태로 점수확인이 불가능하므로 로그아웃상태임을 응답메시지로 만들어 반환한다.
 "Anonymous"가 아닌 클라이언트라면 매개변수로 받음 요청메시지에 포함된 게임번호를 추출하여
 데이터베이스의 해당되는 점수목록테이블에 클라이언트의 ID와 추출된 게임번호로 존재하는 최근 기록 10개를
 검색한다. 검색된 기록은 (YY-MM-DD,점수/YY-MM-DD,점수/YY-MM-DD,점수/...)와 같은 형식으로 만든다.
 만약 검색된 기록이 존재하지 않으면 기록이 존재하지 않음을 응답메시지로 만들어 반환하고
 기록이 존재하면 검색된 기록을 포함하여 응답메시지를 반환한다.

 A_Today()함수는 오늘 저장한 기록이 있는지 확인하기 위한 함수이다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"가 아닌지 확인하고,
 "Anonymous"인 클라이언트는 로그아웃상태임을 반환하고, "Anonymous"이 아닌 클라이언트는
 매개변수로 받은 요청메시지로부터 게임번호를 추출할 수 있다. 게임번호를 추출하여
 클라이언트의 ID와 일치하는 기록이 있는지 데이터베이스의 해당 테이블에 검색한다.
 오늘 저장한 기록이 존재하지 않을 경우 기록이 없음을 응답메시지로 만들어 반환하고
 오늘 저장한 기록이 존재하는 경우 기록이 있음을 응답메시지로 만들어 반환한다.

 A_Save()함수는 게임결과를 저장하기위한 함수입니다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"가 아닌지 확인한다. "Anonymous"인 클라이언트는
 로그인을 하지 않은 상태로 점수저장이 불가능하므로 로그아웃상태임을 응답메시지로 만들어 반환한다.
 "Anonymous"이 아닌 클라이언트라면 매개변수로 요청메시지 뒤에 포함된 게임번호와 점수를 추출하여
 클라이언트의 아이디와 현재 날짜, 추출한 점수를 "INSERT INTO"문으로 SQL문을 만들어 데이터베이스의 해당되는
 점수목록의 테이블에 적용시키고 저장이 성공하였음을 응답메시지로 만들어 반환한다.

 A_Average()함수는 최근 기록한 게임에 대해 측정한 나이를 반환하는 함수입니다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"가 아닌지 확인한다. "Anonymous"인 클라이언트는
 로그인을 하지 않은 상태로 나이를 확인할 수 없으므로 로그아웃상태임을 응답메시지로 만들어 반환한다.
 "Anonymous"가 아닌 클라이언트의 ID를 가지고 데이터베이스 "사용자목록"테이블에 해당 ID로 검색하여
 계산나이와 공간나이, 암기나이를 읽어온다. 이 값을 포함한 응답메시지를 만들어 반환한다.

 A_GetInfo()함수는 로그인한 사용자의 정보를 반환하는 함수입니다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"가 아닌지 확인한다. "Anonymous"인 클라이언트는
 로그인을 하지 않은 상태로 자신의 정보를 확인 할 수 없으므로 로그아웃상태임을 응답메시지로 만들어 반환한다.
 "Anonymous"가 아닌 클라이언트의 ID로 데이터베이스 "사용자목록"테이블에 검색하여 이름, 메일주소, 생년을
 읽어온다. 생년은 현재년도 - 생년 + 1로 나이로 변환 후 이 정보들을 포함한 응답메시지를 만들어 반환한다.

 A_SetInfo()함수는 로그인한 사용자가 입력한 정보를 적용시키기위한 함수이다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"가 아닌지 확인한다. "Anonymous"인 클라이언트는
 로그아웃상태이므로 자신의 정보를 변경할 수 없다. 그러므로 로그아웃상태임을 응답메시지로 반환한다.
 매개변수로 받은 요청메시지에는 ID, 이전 비밀번호, 새 비밀번호, 이름, 메일주소, 나이가 포함되어 있다.
 ID와 이전 비밀번호는 해당 사용자의 정보를 변경하기 전에 다시 확인하기위해서 받았다.
 데이터베이스 "사용자목록"테이블에서 ID와 이전 비밀번호가 일치하는 사용자가 있는지 검색한다.
 만약 존재하지 않으면 이전 비밀번호가 틀렸음을 응답메시지로 반환하고,
 존재한다면 나이를 현재년도 - 나이 + 1로 태어난 년도로 변경한 후, 
"UPDATE"문과 새 비밀번호, 이름, 메일주소, 생년을 SQL문으로 조합하여 데이터베이스 "사용자목록"테이블에
 적용하고 정보수정이 성공되었음을 응답메시지로 만들어 반환한다.

 A_Leave()함수는 로그인한 사용자를 탈퇴시키는 함수이다.
 매개변수로 받은 소켓번호로 해당 클라이언트의 ID가 "Anonymous"가 아닌지 확인한다.
 "Anonymous"인 클라이언트는 로그아웃상태이므로 탈퇴를 할 수 없다.
 그러므로 로그아웃상태임을 응답메시지로 반환한다.
 매개변수로 받은 요청메시지에는 ID와 비밀번호가 포함되어 있는데 이를 추출한다.
 요청메시지의 ID와 현재 클라이언트의 ID와 일치하지 않다면 입력한 정보가 틀렸음을 응답메시지로 반환한다.
 데이터베이스 "사용자목록"테이블에 해당 ID와 비밀번호가 일치하는 사용자가 있는지 확인한다.
 존재하지 않다면 입력한 정보가 틀렸음을 응답메시지로 만들어 반환한다.
 만약 입력한 정보가 일치하는 사용자가 존재한다면 우선 해당 클라이언트를 로그아웃시키기 위해
 해당 소켓의 사용자 ID를 "Anonymous"로 바꾸고 검색된 사용자정보를 임시변수에 저장 후 삭제한다.
 그리고 데이터베이스의 각 점수목록에 대한 테이블에서 요청메시지의 ID와 일치되는 점수들의 주인을 모두
 "Anonymous"로 바꾸기 위해 "UPDATE"문과 "WHERE ID="문을 이용한다.
 frmMain폼의 좌측 접속자 리스트를 갱신하고 탈퇴했음을 메일에 통보하기 위해
 임시변수에 저장한 사용자의 이름과 아이디, 메일주소를 매개변수로 PHP웹서버의 메일전송함수에
 아래와 같이 URL을 조합하여 접속한다.
 ----------------------------------------------------------------------------------------------------------------------
 "http://www.ahyane.net/@mail/mailbye.php?rc=" & RECEIVER & "&nm=" & NAME & "&id=" & ID
 ----------------------------------------------------------------------------------------------------------------------
 그리고 탈퇴가 완료되었음을 응답메시지로 만들어 반환한다.

#RequestModule

 RequestModule모듈은 요청메시지 배열을 제어하기위한 모듈로 문자열배열과 처리중인 메시지의 위치를 가리키는 변수,
 요청메시지 최근 저장위치를 가리키는 변수, 현재 처리중인 메시지를 저장하는 변수를 가지고 있으며,
 함수로는 ResetRequest(), AddRequest(String), GetRequest(), GetCurrentRequest()

 ResetRequest()함수는 요청메시지 배열을 초기화하는 함수로 문자열배열을 빈공간으로 초기화 시킨다.

 AddRequest(String)함수는 매개변수로 받은 String을 문자열배열의 최근 저장위치의 + 1위치에 저장한다. 만약 배열공간이
 Full인 경우 더 이상 요청메시지가 들어갈 공간이 없어서 메시지를 무시했음을 로그로 남긴다.

 GetRequest()함수는 요청메시지를 읽어오는 함수로, 처리중인 메시지의 위치를 가리키는 변수를 1씩 증가시키면서
 해당 위치의 메시지를 현재 처리중인 문자열에 저장한다. 그리고 해당 위치의 메시지는 빈공간으로 초기화된다.

 GetCurrentRequest()함수는 현재 처리중인 메시지를 반환하는 함수로 반환후 빈공간으로 초기화한다.
